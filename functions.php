<?php	/**	* Proper way to enqueue scripts and styles as of Mar 2015	*/	function octane_bootstrap_scripts() {		wp_enqueue_style( 'smain-style', get_stylesheet_uri() );		wp_enqueue_style( 'bootstrap-style', get_template_directory_uri() . '/css/bootstrap.min.css' );		//wp_enqueue_script( 'script-name', get_template_directory_uri() . '/js/example.js', array(), '1.0.0', true );						wp_enqueue_style( 'megafish', get_template_directory_uri() . '/css/megafish.css' );					} //end function	add_action( 'wp_enqueue_scripts', 'octane_bootstrap_scripts' );	/**	* Proper way to enqueue JS and IE fixes as of Mar 2015	*/	function octane_bootstrap_js() {					/* get this ready to actually be added */		wp_enqueue_script( 'bootstrap_js', get_template_directory_uri() . '/js/bootstrap.min.js', array('jquery'), '', true );		wp_enqueue_script( 'octane_custom_js', get_template_directory_uri() . '/js/octane-custom.js', array(), '', true );				wp_enqueue_script( 'js_plugins_custom_js', get_template_directory_uri() . '/js/plugins.js', array(), '', true );						wp_enqueue_script( 'mix_it_up_js', get_template_directory_uri() . '/js/mixitup.js', array(), '', true );		wp_enqueue_script('superfish_js', get_template_directory_uri() .'/js/superfish.js', array('jquery'), false, true);		wp_enqueue_script('hover_intent_js', get_template_directory_uri() .'/js/hoverIntent.js', array('jquery'), false, true);	 							} //end function	add_action( 'wp_enqueue_scripts', 'octane_bootstrap_js' );		/* remove admin bar for all users when logged in */	add_filter( 'show_admin_bar', '__return_false' );			/**	*Enables custom menus to be used with our theme	*/	add_theme_support( 'menus');	add_theme_support( 'post-thumbnails' );		function register_theme_menus() {		register_nav_menus(			array(				'header-menu' => __( 'Header Menu' ),				'mega-one' => __( 'Mega Menu One' ),				'mega-two' => __( 'Mega Menu Two' ),				'mega-three' => __( 'Mega Menu Three' ),				'mega-four' => __( 'Mega Menu Four' )			) //end array		); //end register_nav_menu	} //end function		add_action( 'init', 'register_theme_menus' );			/**	* Create Widgets	*/	function create_widget( $name, $id, $description ) {		/* wrap the header in a h3 tag, and wrap the whole thing in a div w/ class widget */		register_sidebar(array(			'name' => __( $name ),	 			'id' => $id, 			'description' => __( $description ),			'before_widget' => '<div class="widget">',			'after_widget' => '</div>',			'before_title' => '<h3>',			'after_title' => '</h3>'		));						/* FOOTER widget left */		register_sidebar( array(			'name' => __( 'Footer Widget Left', 'octane-bootstrap' ),			'id' => 'footer-left',			'description' => __( 'Displays on the left of the footer.', 'octane-bootstrap' ),			'before_widget' => '<div id="%1$s" class="widget %2$s">',			'after_widget'  => '</div>',			'before_title'  => '<h3 class="widgettitle">',			'after_title'   => '</h3>',		));				/* FOOTER widget center */		register_sidebar( array(			'name' => __( 'Footer Widget Center', 'octane-bootstrap' ),			'id' => 'footer-center',			'description' => __( 'Displays in the center of the footer.', 'octane-bootstrap' ),			'before_widget' => '<div id="%1$s" class="widget %2$s">',			'after_widget'  => '</div>',			'before_title'  => '<h3 class="widgettitle">',			'after_title'   => '</h3>',		));				/* FOOTER widget right */		register_sidebar( array(			'name' => __( 'Footer Widget Right', 'octane-bootstrap' ),			'id' => 'footer-right',			'description' => __( 'Displays on the right of the footer.', 'octane-bootstrap' ),			'before_widget' => '<div id="%1$s" class="widget %2$s">',			'after_widget'  => '</div>',			'before_title'  => '<h3 class="widgettitle">',			'after_title'   => '</h3>',		));				/* FOOTER SOCIAL widget */		register_sidebar( array(			'name' => __( 'Footer Social Widget', 'octane-bootstrap' ),			'id' => 'footer-social',			'description' => __( 'Displays on the footer right before the copyright.', 'octane-bootstrap' ),			'before_widget' => '<div id="%1$s" class="widget %2$s">',			'after_widget'  => '</div>',			'before_title'  => '<h3 class="widgettitle">',			'after_title'   => '</h3>',		));							}//end function		/* parameters - create_widget( 'name of the widget', 'unique-id', 'short description' ); */ 	create_widget( 'Front Page Left', 'front-left', 'Displays on the left of the homepage' );	create_widget( 'Front Page Center', 'front-center', 'Displays in the center of the homepage' );	create_widget( 'Front Page Right', 'front-right', 'Displays on the right of the homepage' );	/* sidebar */	create_widget( 'Page Sidebar', 'page', 'Displays on the right of non-home pages' );				add_filter('show_admin_bar', '__return_false');										/* ===============================================================================================	============================ CUSTOM POST TYPE  ==================================================	================================================================================================*/	add_action( 'init', 'octane_cpt_init' );	function octane_cpt_init() {						/*============================		======= Portfolio Post Type ========		============================*/				$portfolio_labels = array(			'name' => _x('Portfolios', 'post type general name', 'octane-bootstrap'),			'singular_name' => _x('Portfolio', 'post type singular name', 'octane-bootstrap'),			'add_new' => _x('Add New', 'portfolio', 'octane-bootstrap'),			'add_new_item' => __('Add New Portfolio', 'octane-bootstrap'),			'edit_item' => __('Edit Portfolio', 'octane-bootstrap'),			'new_item' => __('New Portfolio', 'octane-bootstrap'),			'view_item' => __('View Portfolio', 'octane-bootstrap'),			'search_items' => __('Search Portfolio', 'octane-bootstrap'),			'not_found' =>  __('No portfolio found', 'octane-bootstrap'),			'not_found_in_trash' => __('No portfolio found in Trash', 'octane-bootstrap'),			'parent_item_colon' => '',			'menu_name' => 'Portfolio'		);		   		// Some arguments and in the last line 'supports', we say to WordPress what features are supported on the Project post type		$portfolio_args = array(			'labels' => $portfolio_labels,			'public' => true,			'publicly_queryable' => true,			'show_ui' => true,			'show_in_menu' => true,			'query_var' => true,			'rewrite' => true,			/* this is important to make it so that page-portfolio.php will show when used */			'capability_type' => 'post',			'can_export' => true,			 /* make sure has_archive is turned off if you plan on using page-portfolio.php */			'has_archive' => false,			'hierarchical' => true,			'menu_position' => null,			/* include this line to use global categories */			//'taxonomies' => array('category'),			'supports' => array('title','editor','author','thumbnail','excerpt','comments','custom-fields','page-attributes')		);			// We call this function to register the custom post type		register_post_type('portfolio',$portfolio_args);				/*============================		======= Portfolio Taxonomy ========		============================*/						// Initialize Taxonomy Labels		$tax_labels = array(			'name' => _x( 'Categories', 'taxonomy general name', 'octane-bootstrap' ),			'singular_name' => _x( 'Cat', 'taxonomy singular name' , 'octane-bootstrap'),			'search_items' =>  __( 'Search Types' , 'octane-bootstrap'),			'all_items' => __( 'All Cats' , 'octane-bootstrap'),			'parent_item' => __( 'Parent Cats', 'octane-bootstrap' ),			'parent_item_colon' => __( 'Parent Cats:' , 'octane-bootstrap'),			'edit_item' => __( 'Edit Cats', 'octane-bootstrap' ),			'update_item' => __( 'Update Cats' , 'octane-bootstrap'),			'add_new_item' => __( 'Add New Cats', 'octane-bootstrap' ),			'new_item_name' => __( 'New Cats Name' , 'octane-bootstrap'),		);				// Register Custom Taxonomy		register_taxonomy('portcats',array('portfolio'), array(			'hierarchical' => true, // define whether to use a system like tags or categories			'labels' => $tax_labels,			'show_ui' => true,			'show_admin_column'     => true,			'query_var' => true,			'rewrite' => array( 'slug' => 'portfolio' ),		));				/*============================			======= Portfolio TAGS ========			============================*/						// Add new taxonomy, NOT hierarchical (like tags)			$labels = array(				'name' => _x( 'Tags', 'taxonomy general name' ),				'singular_name' => _x( 'Tag', 'taxonomy singular name' ),				'search_items' =>  __( 'Search Tags' ),				'popular_items' => __( 'Popular Tags' ),				'all_items' => __( 'All Tags' ),				'parent_item' => null,				'parent_item_colon' => null,				'edit_item' => __( 'Edit Tag' ), 				'update_item' => __( 'Update Tag' ),				'add_new_item' => __( 'Add New Tag' ),				'new_item_name' => __( 'New Tag Name' ),				'separate_items_with_commas' => __( 'Separate tags with commas' ),				'add_or_remove_items' => __( 'Add or remove tags' ),				'choose_from_most_used' => __( 'Choose from the most used tags' ),				'menu_name' => __( 'Tags' ),			); 			register_taxonomy('feattag','portfolio',array(				'hierarchical' => false,				'labels' => $labels,				'show_ui' => true,				'update_count_callback' => '_update_post_term_count',				'query_var' => true,				'rewrite' => array( 'slug' => 'feattag' ),			));										}							/*============================		======= END Taxonomy ====================================*/														/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	~~~~~~~~~~~~~~~~~~~Make Font Awesome available ~~~~~~~~~~~~~~	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	add_action( 'wp_enqueue_scripts', 'enqueue_font_awesome' );	function enqueue_font_awesome() {		wp_enqueue_style( 'font-awesome', '//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css' );	}															/**		 * Include and setup custom metaboxes and fields. (make sure you copy this file to outside the CMB2 directory)		 *		 * Be sure to replace all instances of 'yourprefix_' with your project's prefix.		 * http://nacin.com/2010/05/11/in-wordpress-prefix-everything/		 *		 * @category YourThemeOrPlugin		 * @package  Demo_CMB2		 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)		 * @link     https://github.com/WebDevStudios/CMB2		 */		/**		 * Get the bootstrap! If using the plugin from wordpress.org, REMOVE THIS!		 */		if ( file_exists( dirname( __FILE__ ) . '/cmb2/init.php' ) ) {			require_once dirname( __FILE__ ) . '/cmb2/init.php';		} elseif ( file_exists( dirname( __FILE__ ) . '/CMB2/init.php' ) ) {			require_once dirname( __FILE__ ) . '/CMB2/init.php';		}		/**		 * Conditionally displays a metabox when used as a callback in the 'show_on_cb' cmb2_box parameter		 *		 * @param  CMB2 object $cmb CMB2 object		 *		 * @return bool             True if metabox should show		 */		function yourprefix_show_if_front_page( $cmb ) {			// Don't show this metabox if it's not the front page template			if ( $cmb->object_id !== get_option( 'page_on_front' ) ) {				return false;			}			return true;		}		/**		 * Conditionally displays a field when used as a callback in the 'show_on_cb' field parameter		 *		 * @param  CMB2_Field object $field Field object		 *		 * @return bool                     True if metabox should show		 */		function yourprefix_hide_if_no_cats( $field ) {			// Don't show this field if not in the cats category			if ( ! has_tag( 'cats', $field->object_id ) ) {				return false;			}			return true;		}		/**		 * Conditionally displays a message if the $post_id is 2		 *		 * @param  array             $field_args Array of field parameters		 * @param  CMB2_Field object $field      Field object		 */		function yourprefix_before_row_if_2( $field_args, $field ) {			if ( 2 == $field->object_id ) {				echo '<p>Testing <b>"before_row"</b> parameter (on $post_id 2)</p>';			} else {				echo '<p>Testing <b>"before_row"</b> parameter (<b>NOT</b> on $post_id 2)</p>';			}		}		add_action( 'cmb2_admin_init', 'yourprefix_register_demo_metabox' );		/**		 * Hook in and add a demo metabox. Can only happen on the 'cmb2_admin_init' or 'cmb2_init' hook.		 */		function yourprefix_register_demo_metabox() {			// Start with an underscore to hide fields from custom fields list			$prefix = '_yourprefix_demo_';			/**			 * Sample metabox to demonstrate each field type included			 */			$cmb_demo = new_cmb2_box( array(				'id'            => $prefix . 'metabox',				'title'         => __( 'Test Metabox', 'cmb2' ),				'object_types'  => array( 'page', ), // Post type				// 'show_on_cb' => 'yourprefix_show_if_front_page', // function should return a bool value				// 'context'    => 'normal',				// 'priority'   => 'high',				// 'show_names' => true, // Show field names on the left				// 'cmb_styles' => false, // false to disable the CMB stylesheet				// 'closed'     => true, // true to keep the metabox closed by default			) );			$cmb_demo->add_field( array(				'name'       => __( 'Test Text', 'cmb2' ),				'desc'       => __( 'field description (optional)', 'cmb2' ),				'id'         => $prefix . 'text',				'type'       => 'text',				'show_on_cb' => 'yourprefix_hide_if_no_cats', // function should return a bool value				// 'sanitization_cb' => 'my_custom_sanitization', // custom sanitization callback parameter				// 'escape_cb'       => 'my_custom_escaping',  // custom escaping callback parameter				// 'on_front'        => false, // Optionally designate a field to wp-admin only				// 'repeatable'      => true,			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Text Small', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textsmall',				'type' => 'text_small',				// 'repeatable' => true,			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Text Medium', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textmedium',				'type' => 'text_medium',				// 'repeatable' => true,			) );			$cmb_demo->add_field( array(				'name' => __( 'Website URL', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'url',				'type' => 'text_url',				// 'protocols' => array('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet'), // Array of allowed protocols				// 'repeatable' => true,			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Text Email', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'email',				'type' => 'text_email',				// 'repeatable' => true,			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Time', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'time',				'type' => 'text_time',			) );			$cmb_demo->add_field( array(				'name' => __( 'Time zone', 'cmb2' ),				'desc' => __( 'Time zone', 'cmb2' ),				'id'   => $prefix . 'timezone',				'type' => 'select_timezone',			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Date Picker', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textdate',				'type' => 'text_date',			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Date Picker (UNIX timestamp)', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textdate_timestamp',				'type' => 'text_date_timestamp',				// 'timezone_meta_key' => $prefix . 'timezone', // Optionally make this field honor the timezone selected in the select_timezone specified above			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Date/Time Picker Combo (UNIX timestamp)', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'datetime_timestamp',				'type' => 'text_datetime_timestamp',			) );			// This text_datetime_timestamp_timezone field type			// is only compatible with PHP versions 5.3 or above.			// Feel free to uncomment and use if your server meets the requirement			// $cmb_demo->add_field( array(			// 	'name' => __( 'Test Date/Time Picker/Time zone Combo (serialized DateTime object)', 'cmb2' ),			// 	'desc' => __( 'field description (optional)', 'cmb2' ),			// 	'id'   => $prefix . 'datetime_timestamp_timezone',			// 	'type' => 'text_datetime_timestamp_timezone',			// ) );			$cmb_demo->add_field( array(				'name' => __( 'Test Money', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textmoney',				'type' => 'text_money',				// 'before_field' => '£', // override '$' symbol if needed				// 'repeatable' => true,			) );			$cmb_demo->add_field( array(				'name'    => __( 'Test Color Picker', 'cmb2' ),				'desc'    => __( 'field description (optional)', 'cmb2' ),				'id'      => $prefix . 'colorpicker',				'type'    => 'colorpicker',				'default' => '#ffffff',			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Text Area', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textarea',				'type' => 'textarea',			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Text Area Small', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textareasmall',				'type' => 'textarea_small',			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Text Area for Code', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'textarea_code',				'type' => 'textarea_code',			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Title Weeeee', 'cmb2' ),				'desc' => __( 'This is a title description', 'cmb2' ),				'id'   => $prefix . 'title',				'type' => 'title',			) );			$cmb_demo->add_field( array(				'name'             => __( 'Test Select', 'cmb2' ),				'desc'             => __( 'field description (optional)', 'cmb2' ),				'id'               => $prefix . 'select',				'type'             => 'select',				'show_option_none' => true,				'options'          => array(					'standard' => __( 'Option One', 'cmb2' ),					'custom'   => __( 'Option Two', 'cmb2' ),					'none'     => __( 'Option Three', 'cmb2' ),				),			) );			$cmb_demo->add_field( array(				'name'             => __( 'Test Radio inline', 'cmb2' ),				'desc'             => __( 'field description (optional)', 'cmb2' ),				'id'               => $prefix . 'radio_inline',				'type'             => 'radio_inline',				'show_option_none' => 'No Selection',				'options'          => array(					'standard' => __( 'Option One', 'cmb2' ),					'custom'   => __( 'Option Two', 'cmb2' ),					'none'     => __( 'Option Three', 'cmb2' ),				),			) );			$cmb_demo->add_field( array(				'name'    => __( 'Test Radio', 'cmb2' ),				'desc'    => __( 'field description (optional)', 'cmb2' ),				'id'      => $prefix . 'radio',				'type'    => 'radio',				'options' => array(					'option1' => __( 'Option One', 'cmb2' ),					'option2' => __( 'Option Two', 'cmb2' ),					'option3' => __( 'Option Three', 'cmb2' ),				),			) );			$cmb_demo->add_field( array(				'name'     => __( 'Test Taxonomy Radio', 'cmb2' ),				'desc'     => __( 'field description (optional)', 'cmb2' ),				'id'       => $prefix . 'text_taxonomy_radio',				'type'     => 'taxonomy_radio',				'taxonomy' => 'category', // Taxonomy Slug				// 'inline'  => true, // Toggles display to inline			) );			$cmb_demo->add_field( array(				'name'     => __( 'Test Taxonomy Select', 'cmb2' ),				'desc'     => __( 'field description (optional)', 'cmb2' ),				'id'       => $prefix . 'taxonomy_select',				'type'     => 'taxonomy_select',				'taxonomy' => 'category', // Taxonomy Slug			) );			$cmb_demo->add_field( array(				'name'     => __( 'Test Taxonomy Multi Checkbox', 'cmb2' ),				'desc'     => __( 'field description (optional)', 'cmb2' ),				'id'       => $prefix . 'multitaxonomy',				'type'     => 'taxonomy_multicheck',				'taxonomy' => 'post_tag', // Taxonomy Slug				// 'inline'  => true, // Toggles display to inline			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Checkbox', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'checkbox',				'type' => 'checkbox',			) );			$cmb_demo->add_field( array(				'name'    => __( 'Test Multi Checkbox', 'cmb2' ),				'desc'    => __( 'field description (optional)', 'cmb2' ),				'id'      => $prefix . 'multicheckbox',				'type'    => 'multicheck',				// 'multiple' => true, // Store values in individual rows				'options' => array(					'check1' => __( 'Check One', 'cmb2' ),					'check2' => __( 'Check Two', 'cmb2' ),					'check3' => __( 'Check Three', 'cmb2' ),				),				// 'inline'  => true, // Toggles display to inline			) );			$cmb_demo->add_field( array(				'name'    => __( 'Test wysiwyg', 'cmb2' ),				'desc'    => __( 'field description (optional)', 'cmb2' ),				'id'      => $prefix . 'wysiwyg',				'type'    => 'wysiwyg',				'options' => array( 'textarea_rows' => 5, ),			) );			$cmb_demo->add_field( array(				'name' => __( 'Test Image', 'cmb2' ),				'desc' => __( 'Upload an image or enter a URL.', 'cmb2' ),				'id'   => $prefix . 'image',				'type' => 'file',			) );			$cmb_demo->add_field( array(				'name'         => __( 'Multiple Files', 'cmb2' ),				'desc'         => __( 'Upload or add multiple images/attachments.', 'cmb2' ),				'id'           => $prefix . 'file_list',				'type'         => 'file_list',				'preview_size' => array( 100, 100 ), // Default: array( 50, 50 )			) );			$cmb_demo->add_field( array(				'name' => __( 'oEmbed', 'cmb2' ),				'desc' => __( 'Enter a youtube, twitter, or instagram URL. Supports services listed at <a href="http://codex.wordpress.org/Embeds">http://codex.wordpress.org/Embeds</a>.', 'cmb2' ),				'id'   => $prefix . 'embed',				'type' => 'oembed',			) );			$cmb_demo->add_field( array(				'name'         => 'Testing Field Parameters',				'id'           => $prefix . 'parameters',				'type'         => 'text',				'before_row'   => 'yourprefix_before_row_if_2', // callback				'before'       => '<p>Testing <b>"before"</b> parameter</p>',				'before_field' => '<p>Testing <b>"before_field"</b> parameter</p>',				'after_field'  => '<p>Testing <b>"after_field"</b> parameter</p>',				'after'        => '<p>Testing <b>"after"</b> parameter</p>',				'after_row'    => '<p>Testing <b>"after_row"</b> parameter</p>',			) );		}		add_action( 'cmb2_admin_init', 'yourprefix_register_about_page_metabox' );		/**		 * Hook in and add a metabox that only appears on the 'About' page		 */		function yourprefix_register_about_page_metabox() {			// Start with an underscore to hide fields from custom fields list			$prefix = '_yourprefix_about_';			/**			 * Metabox to be displayed on a single page ID			 */			$cmb_about_page = new_cmb2_box( array(				'id'           => $prefix . 'metabox',				'title'        => __( 'About Page Metabox', 'cmb2' ),				'object_types' => array( 'page', ), // Post type				'context'      => 'normal',				'priority'     => 'high',				'show_names'   => true, // Show field names on the left				'show_on'      => array( 'id' => array( 2, ) ), // Specific post IDs to display this metabox			) );			$cmb_about_page->add_field( array(				'name' => __( 'Test Text', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'text',				'type' => 'text',			) );		}		add_action( 'cmb2_admin_init', 'yourprefix_register_repeatable_group_field_metabox' );		/**		 * Hook in and add a metabox to demonstrate repeatable grouped fields		 */		function yourprefix_register_repeatable_group_field_metabox() {			// Start with an underscore to hide fields from custom fields list			$prefix = '_yourprefix_group_';			/**			 * Repeatable Field Groups			 */			$cmb_group = new_cmb2_box( array(				'id'           => $prefix . 'metabox',				'title'        => __( 'Repeating Field Group', 'cmb2' ),				'object_types' => array( 'page', ),			) );			// $group_field_id is the field id string, so in this case: $prefix . 'demo'			$group_field_id = $cmb_group->add_field( array(				'id'          => $prefix . 'demo',				'type'        => 'group',				'description' => __( 'Generates reusable form entries', 'cmb2' ),				'options'     => array(					'group_title'   => __( 'Entry {#}', 'cmb2' ), // {#} gets replaced by row number					'add_button'    => __( 'Add Another Entry', 'cmb2' ),					'remove_button' => __( 'Remove Entry', 'cmb2' ),					'sortable'      => true, // beta					// 'closed'     => true, // true to have the groups closed by default				),			) );			/**			 * Group fields works the same, except ids only need			 * to be unique to the group. Prefix is not needed.			 *			 * The parent field's id needs to be passed as the first argument.			 */			$cmb_group->add_group_field( $group_field_id, array(				'name'       => __( 'Entry Title', 'cmb2' ),				'id'         => 'title',				'type'       => 'text',				// 'repeatable' => true, // Repeatable fields are supported w/in repeatable groups (for most types)			) );			$cmb_group->add_group_field( $group_field_id, array(				'name'        => __( 'Description', 'cmb2' ),				'description' => __( 'Write a short description for this entry', 'cmb2' ),				'id'          => 'description',				'type'        => 'textarea_small',			) );			$cmb_group->add_group_field( $group_field_id, array(				'name' => __( 'Entry Image', 'cmb2' ),				'id'   => 'image',				'type' => 'file',			) );			$cmb_group->add_group_field( $group_field_id, array(				'name' => __( 'Image Caption', 'cmb2' ),				'id'   => 'image_caption',				'type' => 'text',			) );		}		add_action( 'cmb2_admin_init', 'yourprefix_register_user_profile_metabox' );		/**		 * Hook in and add a metabox to add fields to the user profile pages		 */		function yourprefix_register_user_profile_metabox() {			// Start with an underscore to hide fields from custom fields list			$prefix = '_yourprefix_user_';			/**			 * Metabox for the user profile screen			 */			$cmb_user = new_cmb2_box( array(				'id'               => $prefix . 'edit',				'title'            => __( 'User Profile Metabox', 'cmb2' ),				'object_types'     => array( 'user' ), // Tells CMB2 to use user_meta vs post_meta				'show_names'       => true,				'new_user_section' => 'add-new-user', // where form will show on new user page. 'add-existing-user' is only other valid option.			) );			$cmb_user->add_field( array(				'name'     => __( 'Extra Info', 'cmb2' ),				'desc'     => __( 'field description (optional)', 'cmb2' ),				'id'       => $prefix . 'extra_info',				'type'     => 'title',				'on_front' => false,			) );			$cmb_user->add_field( array(				'name'    => __( 'Avatar', 'cmb2' ),				'desc'    => __( 'field description (optional)', 'cmb2' ),				'id'      => $prefix . 'avatar',				'type'    => 'file',			) );			$cmb_user->add_field( array(				'name' => __( 'Facebook URL', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'facebookurl',				'type' => 'text_url',			) );			$cmb_user->add_field( array(				'name' => __( 'Twitter URL', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'twitterurl',				'type' => 'text_url',			) );			$cmb_user->add_field( array(				'name' => __( 'Google+ URL', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'googleplusurl',				'type' => 'text_url',			) );			$cmb_user->add_field( array(				'name' => __( 'Linkedin URL', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'linkedinurl',				'type' => 'text_url',			) );			$cmb_user->add_field( array(				'name' => __( 'User Field', 'cmb2' ),				'desc' => __( 'field description (optional)', 'cmb2' ),				'id'   => $prefix . 'user_text_field',				'type' => 'text',			) );		}		add_action( 'cmb2_admin_init', 'yourprefix_register_theme_options_metabox' );		/**		 * Hook in and register a metabox to handle a theme options page		 */		function yourprefix_register_theme_options_metabox() {			// Start with an underscore to hide fields from custom fields list			$option_key = '_yourprefix_theme_options';			/**			 * Metabox for an options page. Will not be added automatically, but needs to be called with			 * the `cmb2_metabox_form` helper function. See wiki for more info.			 */			$cmb_options = new_cmb2_box( array(				'id'      => $option_key . 'page',				'title'   => __( 'Theme Options Metabox', 'cmb2' ),				'hookup'  => false, // Do not need the normal user/post hookup				'show_on' => array(					// These are important, don't remove					'key'   => 'options-page',					'value' => array( $option_key )				),			) );			/**			 * Options fields ids only need			 * to be unique within this option group.			 * Prefix is not needed.			 */			$cmb_options->add_field( array(				'name'    => __( 'Site Background Color', 'cmb2' ),				'desc'    => __( 'field description (optional)', 'cmb2' ),				'id'      => 'bg_color',				'type'    => 'colorpicker',				'default' => '#ffffff',			) );		}									/**			 * CMB2 Theme Options			 * @version 0.1.0			 */			class Myprefix_Admin {				/**				 * Option key, and option page slug				 * @var string				 */				private $key = 'myprefix_options';				/**				 * Options page metabox id				 * @var string				 */				private $metabox_id = 'myprefix_option_metabox';				/**				 * Options Page title				 * @var string				 */				protected $title = '';				/**				 * Options Page hook				 * @var string				 */				protected $options_page = '';				/**				 * Constructor				 * @since 0.1.0				 */				public function __construct() {					// Set our title					$this->title = __( 'Site Options', 'myprefix' );				}				/**				 * Initiate our hooks				 * @since 0.1.0				 */				public function hooks() {					add_action( 'admin_init', array( $this, 'init' ) );					add_action( 'admin_menu', array( $this, 'add_options_page' ) );					add_action( 'cmb2_admin_init', array( $this, 'add_options_page_metabox' ) );				}				/**				 * Register our setting to WP				 * @since  0.1.0				 */				public function init() {					register_setting( $this->key, $this->key );				}				/**				 * Add menu options page				 * @since 0.1.0				 */				public function add_options_page() {					$this->options_page = add_menu_page( $this->title, $this->title, 'manage_options', $this->key, array( $this, 'admin_page_display' ) );					// Include CMB CSS in the head to avoid FOUC					add_action( "admin_print_styles-{$this->options_page}", array( 'CMB2_hookup', 'enqueue_cmb_css' ) );				}				/**				 * Admin page markup. Mostly handled by CMB2				 * @since  0.1.0				 */				public function admin_page_display() {					?>					<div class="wrap cmb2-options-page <?php echo $this->key; ?>">						<h2><?php echo esc_html( get_admin_page_title() ); ?></h2>						<?php cmb2_metabox_form( $this->metabox_id, $this->key ); ?>					</div>					<?php				}				/**				 * Add the options metabox to the array of metaboxes				 * @since  0.1.0				 */				function add_options_page_metabox() {					// hook in our save notices					add_action( "cmb2_save_options-page_fields_{$this->metabox_id}", array( $this, 'settings_notices' ), 10, 2 );					$cmb = new_cmb2_box( array(						'id'         => $this->metabox_id,						'hookup'     => false,						'cmb_styles' => false,						'show_on'    => array(							// These are important, don't remove							'key'   => 'options-page',							'value' => array( $this->key, )						),					) );					// Set our CMB2 fields					$cmb->add_field( array(						'name' => __( 'Test Text', 'myprefix' ),						'desc' => __( 'field description (optional)', 'myprefix' ),						'id'   => 'test_text',						'type' => 'text',						'default' => 'Default Text',					) );					$cmb->add_field( array(						'name'    => __( 'Test Color Picker', 'myprefix' ),						'desc'    => __( 'field description (optional)', 'myprefix' ),						'id'      => 'test_colorpicker',						'type'    => 'colorpicker',						'default' => '#bada55',					) );				}				/**				 * Register settings notices for display				 *				 * @since  0.1.0				 * @param  int   $object_id Option key				 * @param  array $updated   Array of updated fields				 * @return void				 */				public function settings_notices( $object_id, $updated ) {					if ( $object_id !== $this->key || empty( $updated ) ) {						return;					}					add_settings_error( $this->key . '-notices', '', __( 'Settings updated.', 'myprefix' ), 'updated' );					settings_errors( $this->key . '-notices' );				}				/**				 * Public getter method for retrieving protected/private variables				 * @since  0.1.0				 * @param  string  $field Field to retrieve				 * @return mixed          Field value or exception is thrown				 */				public function __get( $field ) {					// Allowed fields to retrieve					if ( in_array( $field, array( 'key', 'metabox_id', 'title', 'options_page' ), true ) ) {						return $this->{$field};					}					throw new Exception( 'Invalid property: ' . $field );				}			}			/**			 * Helper function to get/return the Myprefix_Admin object			 * @since  0.1.0			 * @return Myprefix_Admin object			 */			function myprefix_admin() {				static $object = null;				if ( is_null( $object ) ) {					$object = new Myprefix_Admin();					$object->hooks();				}				return $object;			}			/**			 * Wrapper function around cmb2_get_option			 * @since  0.1.0			 * @param  string  $key Options array key			 * @return mixed        Option value			 */			function myprefix_get_option( $key = '' ) {				return cmb2_get_option( myprefix_admin()->key, $key );			}			// Get it started			myprefix_admin();									/*===============================================================				FRONT END FORM SUBMISSION 			================================================================*/								/**			 * Register the form and fields for our front-end submission form			 */			function wds_frontend_form_register() {				$cmb = new_cmb2_box( array(					'id'           => 'front-end-post-form',					'object_types' => array( 'post' ),					'hookup'       => false,					'save_fields'  => false,				) );				$cmb->add_field( array(					'name'    => __( 'New Post Title', 'wds-post-submit' ),					'id'      => 'submitted_post_title',					'type'    => 'text',					'default' => __( 'New Post', 'wds-post-submit' ),				) );				$cmb->add_field( array(					'name'    => __( 'New Post Content', 'wds-post-submit' ),					'id'      => 'submitted_post_content',					'type'    => 'wysiwyg',					'options' => array(						'textarea_rows' => 12,						'media_buttons' => false,					),				) );				$cmb->add_field( array(					'name'       => __( 'Featured Image for New Post', 'wds-post-submit' ),					'id'         => 'submitted_post_thumbnail',					'type'       => 'text',					'attributes' => array(						'type' => 'file', // Let's use a standard file upload field					),				) );				$cmb->add_field( array(					'name' => __( 'Your Name', 'wds-post-submit' ),					'desc' => __( 'Please enter your name for author credit on the new post.', 'wds-post-submit' ),					'id'   => 'submitted_author_name',					'type' => 'text',				) );				$cmb->add_field( array(					'name' => __( 'Your Email', 'wds-post-submit' ),					'desc' => __( 'Please enter your email so we can contact you if we use your post.', 'wds-post-submit' ),					'id'   => 'submitted_author_email',					'type' => 'text_email',				) );			}			add_action( 'cmb2_init', 'wds_frontend_form_register' );			/**			 * Gets the front-end-post-form cmb instance			 *			 * @return CMB2 object			 */			function wds_frontend_cmb2_get() {				// Use ID of metabox in wds_frontend_form_register				$metabox_id = 'front-end-post-form';				// Post/object ID is not applicable since we're using this form for submission				$object_id  = 'fake-oject-id';				// Get CMB2 metabox object				return cmb2_get_metabox( $metabox_id, $object_id );			}			/**			 * Handle the cmb-frontend-form shortcode			 *			 * @param  array  $atts Array of shortcode attributes			 * @return string       Form html			 */			function wds_do_frontend_form_submission_shortcode( $atts = array() ) {				// Get CMB2 metabox object				$cmb = wds_frontend_cmb2_get();				// Get $cmb object_types				$post_types = $cmb->prop( 'object_types' );				// Current user				$user_id = get_current_user_id();				// Parse attributes				$atts = shortcode_atts( array(					'post_author' => $user_id ? $user_id : 1, // Current user, or admin					'post_status' => 'pending',					'post_type'   => reset( $post_types ), // Only use first object_type in array				), $atts, 'cmb-frontend-form' );				/*				 * Let's add these attributes as hidden fields to our cmb form				 * so that they will be passed through to our form submission				 */				foreach ( $atts as $key => $value ) {					$cmb->add_hidden_field( array(						'field_args'  => array(							'id'    => "atts[$key]",							'type'  => 'hidden',							'default' => $value,						),					) );				}				// Initiate our output variable				$output = '';				// Get any submission errors				if ( ( $error = $cmb->prop( 'submission_error' ) ) && is_wp_error( $error ) ) {					// If there was an error with the submission, add it to our ouput.					$output .= '<h3>' . sprintf( __( 'There was an error in the submission: %s', 'wds-post-submit' ), '<strong>'. $error->get_error_message() .'</strong>' ) . '</h3>';				}				// If the post was submitted successfully, notify the user.				if ( isset( $_GET['post_submitted'] ) && ( $post = get_post( absint( $_GET['post_submitted'] ) ) ) ) {					// Get submitter's name					$name = get_post_meta( $post->ID, 'submitted_author_name', 1 );					$name = $name ? ' '. $name : '';					// Add notice of submission to our output					$output .= '<h3>' . sprintf( __( 'Thank you%s, your new post has been submitted and is pending review by a site administrator.', 'wds-post-submit' ), esc_html( $name ) ) . '</h3>';				}				// Get our form				$output .= cmb2_get_metabox_form( $cmb, 'fake-oject-id', array( 'save_button' => __( 'Submit Post', 'wds-post-submit' ) ) );				return $output;			}			add_shortcode( 'cmb-frontend-form', 'wds_do_frontend_form_submission_shortcode' );			/**			 * Handles form submission on save. Redirects if save is successful, otherwise sets an error message as a cmb property			 *			 * @return void			 */			function wds_handle_frontend_new_post_form_submission() {				// If no form submission, bail				if ( empty( $_POST ) || ! isset( $_POST['submit-cmb'], $_POST['object_id'] ) ) {					return false;				}				// Get CMB2 metabox object				$cmb = wds_frontend_cmb2_get();				$post_data = array();				// Get our shortcode attributes and set them as our initial post_data args				if ( isset( $_POST['atts'] ) ) {					foreach ( (array) $_POST['atts'] as $key => $value ) {						$post_data[ $key ] = sanitize_text_field( $value );					}					unset( $_POST['atts'] );				}				// Check security nonce				if ( ! isset( $_POST[ $cmb->nonce() ] ) || ! wp_verify_nonce( $_POST[ $cmb->nonce() ], $cmb->nonce() ) ) {					return $cmb->prop( 'submission_error', new WP_Error( 'security_fail', __( 'Security check failed.' ) ) );				}				// Check title submitted				if ( empty( $_POST['submitted_post_title'] ) ) {					return $cmb->prop( 'submission_error', new WP_Error( 'post_data_missing', __( 'New post requires a title.' ) ) );				}				// And that the title is not the default title				if ( $cmb->get_field( 'submitted_post_title' )->default() == $_POST['submitted_post_title'] ) {					return $cmb->prop( 'submission_error', new WP_Error( 'post_data_missing', __( 'Please enter a new title.' ) ) );				}				/**				 * Fetch sanitized values				 */				$sanitized_values = $cmb->get_sanitized_values( $_POST );				// Set our post data arguments				$post_data['post_title']   = $sanitized_values['submitted_post_title'];				unset( $sanitized_values['submitted_post_title'] );				$post_data['post_content'] = $sanitized_values['submitted_post_content'];				unset( $sanitized_values['submitted_post_content'] );				// Create the new post				$new_submission_id = wp_insert_post( $post_data, true );				// If we hit a snag, update the user				if ( is_wp_error( $new_submission_id ) ) {					return $cmb->prop( 'submission_error', $new_submission_id );				}				/**				 * Other than post_type and post_status, we want				 * our uploaded attachment post to have the same post-data				 */				unset( $post_data['post_type'] );				unset( $post_data['post_status'] );				// Try to upload the featured image				$img_id = wds_frontend_form_photo_upload( $new_submission_id, $post_data );				// If our photo upload was successful, set the featured image				if ( $img_id && ! is_wp_error( $img_id ) ) {					set_post_thumbnail( $new_submission_id, $img_id );				}				// Loop through remaining (sanitized) data, and save to post-meta				foreach ( $sanitized_values as $key => $value ) {					if ( is_array( $value ) ) {						$value = array_filter( $value );						if( ! empty( $value ) ) {							update_post_meta( $new_submission_id, $key, $value );						}					} else {						update_post_meta( $new_submission_id, $key, $value );					}				}				/*				 * Redirect back to the form page with a query variable with the new post ID.				 * This will help double-submissions with browser refreshes				 */				wp_redirect( esc_url_raw( add_query_arg( 'post_submitted', $new_submission_id ) ) );				exit;			}			add_action( 'cmb2_after_init', 'wds_handle_frontend_new_post_form_submission' );			/**			 * Handles uploading a file to a WordPress post			 *			 * @param  int   $post_id              Post ID to upload the photo to			 * @param  array $attachment_post_data Attachement post-data array			 */			function wds_frontend_form_photo_upload( $post_id, $attachment_post_data = array() ) {				// Make sure the right files were submitted				if (					empty( $_FILES )					|| ! isset( $_FILES['submitted_post_thumbnail'] )					|| isset( $_FILES['submitted_post_thumbnail']['error'] ) && 0 !== $_FILES['submitted_post_thumbnail']['error']				) {					return;				}				// Filter out empty array values				$files = array_filter( $_FILES['submitted_post_thumbnail'] );				// Make sure files were submitted at all				if ( empty( $files ) ) {					return;				}				// Make sure to include the WordPress media uploader API if it's not (front-end)				if ( ! function_exists( 'media_handle_upload' ) ) {					require_once( ABSPATH . 'wp-admin/includes/image.php' );					require_once( ABSPATH . 'wp-admin/includes/file.php' );					require_once( ABSPATH . 'wp-admin/includes/media.php' );				}				// Upload the file and send back the attachment post ID				return media_handle_upload( 'submitted_post_thumbnail', $post_id, $attachment_post_data );			}									?>